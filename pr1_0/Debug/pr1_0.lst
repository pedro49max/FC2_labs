
pr1_0.elf:     file format elf32-littleriscv
pr1_0.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x0000003c memsz 0x0000003c flags r-x
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000008 memsz 0x0000000c flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .text             0000003c  00000000  00000000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data             00000008  00010000  00010000  00002000  2**0  CONTENTS, ALLOC, LOAD, DATA
  2 .bss              00000004  00010008  00010008  00002008  2**0  ALLOC
  3 .riscv.attributes 0000001f  00000000  00000000  00002008  2**0  CONTENTS, READONLY
  4 .debug_line       00000079  00000000  00000000  00002027  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info       00000026  00000000  00000000  000020a0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev     00000014  00000000  00000000  000020c6  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges    00000020  00000000  00000000  000020e0  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str        00000049  00000000  00000000  00002100  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00010000 l    d  .data	00000000 .data
00010008 l    d  .bss	00000000 .bss
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 ./pr1_0.o
00010000 l       .data	00000000 A
00010004 l       .data	00000000 B
00010008 l       .bss	00000000 GREATER
0000002c l       .text	00000000 mayb
00000038 l       .text	00000000 end
00000000 g       .text	00000000 main
00020000 g       *ABS*	00000000 _stack



Disassembly of section .text:

00000000 <main>:
main():
C:\Universidad\Cuatri2\FC2\FC2labWS\pr1_0\Debug/../pr1_0.asm:27
    GREATER:  .space 4//data 'GREATER' takes 4 bytes

.text               //code section
.global main        //''main'' can be called from outside
main:               //code entry point
    la t2, A        //the address of A is loaded into t2
   0:	00010397          	auipc	t2,0x10
   4:	00038393          	mv	t2,t2
C:\Universidad\Cuatri2\FC2\FC2labWS\pr1_0\Debug/../pr1_0.asm:28
    lw t0, 0(t2)    //we use the address to load the value of A
   8:	0003a283          	lw	t0,0(t2) # 10000 <A>
C:\Universidad\Cuatri2\FC2\FC2labWS\pr1_0\Debug/../pr1_0.asm:29
    la t3, B        //the address of B is loaded into t3
   c:	00010e17          	auipc	t3,0x10
  10:	ff8e0e13          	addi	t3,t3,-8 # 10004 <B>
C:\Universidad\Cuatri2\FC2\FC2labWS\pr1_0\Debug/../pr1_0.asm:30
    lw t1, 0(t3)    //we use the address to load the value of B
  14:	000e2303          	lw	t1,0(t3)
C:\Universidad\Cuatri2\FC2\FC2labWS\pr1_0\Debug/../pr1_0.asm:31
    ble t0, t1, mayb//if t0 (A) <= t1 (B), then branch (inverse condition)
  18:	00535a63          	bge	t1,t0,2c <mayb>
C:\Universidad\Cuatri2\FC2\FC2labWS\pr1_0\Debug/../pr1_0.asm:33
                    //in this case we have not branched (A is greater)
    la t4, GREATER  //the address of GREATER is loaded into t4
  1c:	00010e97          	auipc	t4,0x10
  20:	fece8e93          	addi	t4,t4,-20 # 10008 <GREATER>
C:\Universidad\Cuatri2\FC2\FC2labWS\pr1_0\Debug/../pr1_0.asm:34
    sw t0, 0(t4)    //we store t0 (A) into GREATER
  24:	005ea023          	sw	t0,0(t4)
C:\Universidad\Cuatri2\FC2\FC2labWS\pr1_0\Debug/../pr1_0.asm:35
    j end           //we branch to the end of the program
  28:	0100006f          	j	38 <end>

0000002c <mayb>:
mayb():
C:\Universidad\Cuatri2\FC2\FC2labWS\pr1_0\Debug/../pr1_0.asm:37
mayb:               //in this case, B is greater (or equal)
    la t4, GREATER  //the address of GREATER is loaded into t4
  2c:	00010e97          	auipc	t4,0x10
  30:	fdce8e93          	addi	t4,t4,-36 # 10008 <GREATER>
C:\Universidad\Cuatri2\FC2\FC2labWS\pr1_0\Debug/../pr1_0.asm:38
    sw t1, 0(t4)    //we store t1 (B) into GREATER
  34:	006ea023          	sw	t1,0(t4)

00000038 <end>:
end():
C:\Universidad\Cuatri2\FC2\FC2labWS\pr1_0\Debug/../pr1_0.asm:40
end:                //end of program
    j end           //the program stays here forever
  38:	0000006f          	j	38 <end>
